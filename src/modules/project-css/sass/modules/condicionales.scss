body {
  background-color: yellow;
}
@mixin grid($child,$number){
  display: flex;
  flex-wrap: wrap;
  background-color: red;
  height: 300px;
  @if $child == li {
    padding-left: 0;
    padding-top: 0;
    margin-bottom: 0;
    list-style: none;
  }
  #{$child} {
    width: (100% / $number );
  }
}

@mixin columns($col, $max-cols:12){
  @if $col <= $max-cols{
    width: percentage($col / $max-cols);
  } @else {
    @at-root {
      body {
        padding-bottom: 2em;
        display: block;
        // color: black;
        content: "El parÃ¡metro #{$col} no puede ser mayor a #{$max-cols}";
      }
    }
  }
}

// For
@for $i from 1 through 5 {
  // codigo que se repite hasta el numero <end:5>
}

@for $i from 1 to 5 {
  // codigo que se repite hasta el numero <end-1:4>
  .item-#{$i}{
    width: percentage($i/5);
  }
}

$colors: green, red, yellow, blue, black, orange;

@for $i from 1 through length($colors) {
  $color: nth($colors, $i);
  .btn.#{$color} {
    background-color: $color;
  }
}

// Each para listas
@each $color in $colors {
  .btn-each.#{$color}{
    background-color: $color;
  }
}

$map:(
  facebook: blue,
  twitter: red,
  linkedin: black,
  instagram: green
);

// Each para maps {
@each $key, $value in $map {
  .btn-map.#{$key} {
    color: $value;
  }
}

$i: 1;
@while $i <= length($colors) {
  $current: nth($colors, $i);
  .while.#{$current}{
    background-color: $current;
  }
  $i: $i + 1;
}

.gallery {
  @include grid('.photo',2 );
}

.column-3{
  @include columns(13);
}

// Ejemplos
$networks: (facebook, blue, 1px),
(twitter, lightblue,2px),
(youtube,red,3px);

@for $i from 1 through length($networks) {
  $network: nth($networks, $i);
  @for $j from 1 through length($network) {
    $value: nth($network,$j);
    .example.#{$i}.#{$j}{
      value: $value;
    }
  }
}

@each $network in $networks {
  @each $value in $network {
    .each-example {
      value: $value;
    }
  }
}

@each $network in $networks {
  $social: nth($network,1);
  .#{$social}{
    background-color: nth($network, 2);
    padding-top: nth($network, 3);
  }
}

// Crear funcion para recuperar un valor dentro de listas anidadas

@function sublist($list, $index, $subindex) {
  $sublist: nth($list, $index);
  $value: nth($sublist,$subindex);
  @return $value;
}

data {
  value: sublist($networks, 3,1);
}

// Recorrer un mapa anidado
$colors: (
  blue: (
    base: blue,
    dark: darken(blue,10),
    light: lighten(blue,10)
  ),
  green: (
    base: green,
    dark: darken(green,10),
    light: lighten(green,10)
  )
);

@function map-key($map, $key, $subkey){
  $submap: map-get($map,$key);
  $value: map-get($submap, $subkey);
  @return $value;
}

.data-map {
  value: map-key($colors, blue , base );
}

@each $color, $subcolors in $colors {
  @each $type, $value in $subcolors {
    .#{$color}-#{$type} {
      background-color: $value;
    }
  }
}
